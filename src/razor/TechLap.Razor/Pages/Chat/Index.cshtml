@page
@model TechLap.Razor.Pages.Chat.IndexModel
@{
    ViewData["Title"] = "Chat Support";
}

<div class="chat-wrapper">
    <div class="chat-container">
        <div class="chat-header">
            <div class="chat-header-info">
                <div class="chat-avatar">
                    <i class="fas fa-headset"></i>
                </div>
                <div class="chat-title">
                    <h1>Support Chat</h1>
                    <span class="status"><i class="fas fa-circle"></i> Online</span>
                </div>
            </div>
        </div>

        <div class="messages-container">
            <ul id="messageList"></ul>
        </div>

        <div class="chat-input-container">
            <div class="input-wrapper">
                <input type="text"
                       id="messageInput"
                       placeholder="Type your message..."
                       onkeypress="if(event.keyCode==13) sendMessage('@Model.UserId', this.value)" />
                <div class="input-actions">
                    <button class="emoji-button">
                        <i class="far fa-smile"></i>
                    </button>
                    <button class="send-button" onclick="sendMessage('@Model.UserId', document.getElementById('messageInput').value)">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Reset and base styles */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .chat-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 80vh;
        background-color: #f0f2f5;
        padding: 20px;
    }

    .chat-container {
        width: 100%;
        max-width: 900px;
        height: 80vh;
        background: white;
        border-radius: 20px;
        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
    }

    .chat-header {
        padding: 20px;
        border-bottom: 1px solid #eee;
    }

    .chat-header-info {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .chat-avatar {
        width: 45px;
        height: 45px;
        background: #007bff;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .chat-avatar i {
        color: white;
        font-size: 20px;
    }

    .chat-title h1 {
        font-size: 18px;
        margin-bottom: 5px;
        color: #1a1a1a;
    }

    .status {
        font-size: 14px;
        color: #666;
    }

    .status i {
        color: #2ecc71;
        font-size: 10px;
        margin-right: 5px;
    }

    .messages-container {
        flex: 1;
        padding: 20px;
        overflow-y: auto;
    }

    #messageList {
        list-style: none;
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    #messageList li {
        max-width: 70%;
        padding: 12px 16px;
        border-radius: 15px;
        position: relative;
        line-height: 1.5;
        font-size: 15px;
    }

    #messageList li[data-sender="User"] {
        background-color: #007bff;
        color: white;
        margin-left: auto;
        border-bottom-right-radius: 5px;
    }

    #messageList li[data-sender="Admin"] {
        background-color: #f0f0f0;
        color: #1a1a1a;
        margin-right: auto;
        border-bottom-left-radius: 5px;
    }

    .chat-input-container {
        padding: 20px;
        border-top: 1px solid #eee;
    }

    .input-wrapper {
        display: flex;
        align-items: center;
        background: #f0f2f5;
        border-radius: 25px;
        padding: 8px 15px;
    }

    #messageInput {
        flex: 1;
        border: none;
        background: transparent;
        padding: 10px;
        font-size: 15px;
        outline: none;
    }

    .input-actions {
        display: flex;
        gap: 10px;
    }

    .emoji-button, .send-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 8px;
        border-radius: 50%;
        transition: background-color 0.2s;
    }

    .emoji-button:hover, .send-button:hover {
        background-color: #e4e6eb;
    }

    .emoji-button i {
        font-size: 20px;
        color: #666;
    }

    .send-button i {
        font-size: 20px;
        color: #007bff;
    }

    /* Custom scrollbar */
    .messages-container::-webkit-scrollbar {
        width: 6px;
    }

    .messages-container::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .messages-container::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 3px;
    }

    .messages-container::-webkit-scrollbar-thumb:hover {
        background: #555;
    }
</style>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

    <script>
        const token = '@TempData["Token"]';
        if (token) {
            sessionStorage.setItem('JWTToken', token);
            console.log("Token stored in sessionStorage:", token);
        } else {
            console.log("Token not found in TempData.");
        }

        const apiEndpoint = '@Model.ApiEndpoint';

        const connection = new signalR.HubConnectionBuilder()
            .withUrl(apiEndpoint + "/chatHub", {
                accessTokenFactory: () => sessionStorage.getItem('JWTToken')
            })
            .withAutomaticReconnect()
            .build();

        connection.start()
            .then(() => console.log("Connected to SignalR hub"))
            .catch(err => console.error("SignalR Connection Error: ", err));

        connection.on("ReceiveMessage", (user, message) => {
            const messageList = document.getElementById("messageList");
            const li = document.createElement("li");
            li.textContent = `${user}: ${message}`;
            messageList.appendChild(li);
        });

        async function sendMessage(userId, messageContent) {
            if (!messageContent) return;

            const token = sessionStorage.getItem('JWTToken');
            if (!token) {
                alert("Bạn cần đăng nhập lại để tiếp tục sử dụng chat.");
                return;
            }

            try {
                const response = await fetch(apiEndpoint + "/api/chat/send", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${token}`
                    },
                    body: JSON.stringify({
                        receiverId: 1,
                        messageContent: messageContent
                    })
                });

                if (!response.ok) {
                    throw new Error("Unauthorized access - Please log in again.");
                }

                const data = await response.json();
                if (data.isSuccess) {
                    await connection.invoke("SendMessage", "User", messageContent);
                    document.getElementById("messageInput").value = "";
                } else {
                    alert("Error sending message");
                }
            } catch (error) {
                console.error("Error:", error);
            }
        }

        // Add event listener for Enter key
        document.getElementById('messageInput').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                sendMessage('@Model.UserId', this.value);
            }
        });
    </script>
}